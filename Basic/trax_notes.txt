//TODO: use pointers/refs

namespace Trax

	class TraxGame
		private Map<Coord, Tile> board_ // all laid tiles
		private Map<Coord, Tile> open_tiles_ // coords where tiles can be laid
		private uint played_tiles_ = 0 // counter

		public bool addTile (Coord coord, Tile tile)
			// check if tile can be laid
			// do so, or return false
			// adjust board_ and open_tiles_ maps accordingly

		private void completeBoard ()
			// fill fixed fields
			// called by addTile

		public bool write (string filename) // write map to file

		public void quit () // quit game and output bye-msg

		public bool checkGameWon () // has to be called after every move, otherwise -> exception

		public TraxGame () // initialize maps etc.

//#######################################################################

	class Tile
		public Color getLeft ()
		public Color getTop ()
		public Color getRight ()
		public Color getBottom ()
		...

//#######################################################################

	Class Coord
		...

//#######################################################################

	abstract class Command
		private string command_
		private Vector<string> params_

		public static Command ParseCommand (string command_string)
			// parse command string and return as command object
			// output error msgs

		//private <Sub>Command (Vector<string> params) // private constructors in subclasses / use factory pattern

		public abstract executeCommandOnBoard (TraxGame board) = 0
			// subclasses: Write, AddTile, Quit
			// check if game won after addTile
			// possibly overwrite operator() ?
		...

//#######################################################################

	static class CommandLineInterface
		public static outputErrorMessage (Error error) // access to cout/cin only here

		// handle "sep> "-prompt and inputs
		...

//#######################################################################

	enum Color
	enum Error